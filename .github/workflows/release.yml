on:
  push:
    tags:
      - 'v*'

name: 🔖 Release
concurrency: release

permissions:
  id-token: write # this is required for AWS https://github.com/aws-actions/configure-aws-credentials#usage
  contents: write # this is required for Nx https://github.com/nrwl/nx-set-shas#permissions-in-v2
  actions: read # this is required for Nx https://github.com/nrwl/nx-set-shas#permissions-in-v2

env:
  CI: true
  AWS_REGION: eu-west-1

defaults:
  run:
    shell: bash

jobs:
  release:
    name: 🔖 Release
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0

      - name: Setup Nx SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.2.0

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: 💾 Cache Nx cache
        id: package-cache
        uses: actions/cache@v4
        with:
          path: |
            nx-cache
          # Cache will be updated at every run: https://github.com/actions/cache/blob/main/workarounds.md#update-a-cache
          key: ${{ runner.os }}-nx-cache-${{ steps.setup-node.outputs.node-version }}-${{ github.run_id }}
      - name: '🏗 Package'
        run: pnpm nx affected --targets=package,build --parallel=2
      - name: '🧪 Run tests'
        run: pnpm nx affected --targets=test-linter,test-type,test-unit,test-circular,test-cdk --parallel=2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_PRODUCTION }}

      - name: '🚀 Deploy production'
        run: pnpm nx affected --target=deploy-production --parallel=2

      - name: '🔎 Run integration tests on production'
        run: SLS_ENV=production pnpm nx affected --target=test-integration --parallel=2

      - name: '🧹 Clean Unused CDK assets'
        run: pnpm nx affected --target=cdk-gc

      - name: Get latest release matching release tag type
        id: get-latest-release
        uses: rez0n/actions-github-release@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          # 'prerelease' if tag inclues 'alpha', otherwise 'stable'
          type: ${{ contains(github.ref, 'alpha') && 'prerelease' || 'stable' }}

      - name: Create draft Github release
        run: pnpm changelogithub --draft --from ${{ steps.get-latest-release.outputs.release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
